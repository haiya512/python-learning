import sys, new
class ImporterAndLoader(object):
    """
    importer and loader functionalibty is usually in a single class
    """
    fake_path = "!dummy!"
    def __init__(self, path):
        """ we only handle our own fake-path marker """
        if path != self.fake_path:
            raise ImportError
    def find_module(self, fullname):
        """ we don't even try to handle any qualified module-name """
        if '.' in fullname:
            return None
        return self
    def load_module(self, fullname):
        print 'NOTE: module %r not written yet' % fullname
        mod = sys.modules[fullname] = new.module(fullname)
        mod.__file__ = 'dummy<%s>' % fullname
        mode.__loader__ = self
sys.path_hooks.append(ImporterAndLoader)
sys.path.append(ImporterAndLoad.fake_path)

if __name__ == '__main__':
    import missing_module
    print sys.modules.get('missing_module')
    try:
        import missing_module.sub_module
    except ImportError:
        pass
    else:
        print 'Unexpected:', sys.modules.get('missing_module.sub_module')
